parameters:
- name: RunOnnxRuntimeTests
  displayName: Run Tests?
  type: boolean
  default: true

- name: DoCompliance
  displayName: Run Compliance Tasks?
  type: boolean
  default: true

- name: PublishingNuget
  displayName: Publishing Nuget Packages and report binary size to mysql
  type: boolean
  default: true

- name: DoEsrp
  displayName: Run code sign tasks? Must be true if you are doing an Onnx Runtime release.
  type: boolean
  default: false

- name: IsReleaseBuild
  displayName: Is a release build? Set it to true if you are doing an Onnx Runtime release.
  type: boolean
  default: false

- name: AdditionalBuildFlags
  displayName: Additional build flags for build.py
  type: string
  default: ''

- name: AdditionalWinBuildFlags
  displayName: Additional build flags that just for Windows Builds
  type: string
  default: ''

- name: OrtNugetPackageId
  displayName: Package name for nuget
  type: string
  default: 'Microsoft.ML.OnnxRuntime'

- name: BuildVariant
  type: string
  default: 'openmp'

jobs:
- job: Publish_NuGet_Package_And_Report
  workspace:
    clean: all
  variables:
  - name: GDN_CODESIGN_TARGETDIRECTORY
    value: '$(Build.BinariesDirectory)/nuget-artifact/final-package'
  pool: 'Win-CPU-2021'
  condition: and (succeeded(), and (${{ parameters.PublishingNuget }}, eq(variables['Build.SourceBranch'], 'refs/heads/master')))
  steps:
  - checkout: self
    submodules: false
  - template: set-version-number-variables-step.yml

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - Signed NuGet Package'
    inputs:
      artifactName: 'drop-signed-nuget-CPU'
      targetPath: $(Build.BinariesDirectory)/nuget-artifact/final-package
      buildType: specific
      project: '530acbc4-21bc-487d-8cd8-348ff451d2ff'
      definition: 940
      buildVersionToDownload: specific
      pipelineId: 170320

  - task: CmdLine@2
    displayName: 'Post binary sizes to the dashboard database using command line'
    inputs:
      script: |
          python.exe -m pip install azure-kusto-data[pandas] azure-kusto-ingest[pandas]
          echo changing directory to artifact download path
          cd $(Build.BinariesDirectory)/nuget-artifact/final-package
          echo processing nupkg
          SETLOCAL EnableDelayedExpansion   
          FOR /R %%i IN (*.nupkg) do (
           set filename=%%~ni
           IF NOT "!filename:~25,7!"=="Managed" (
            echo processing %%~ni.nupkg
            copy %%~ni.nupkg %%~ni.zip
            echo copied to zip
            echo listing lib files in the zip 
            REM use a single .csv file to put the data 
            echo os,arch,build_config,size > $(Build.BinariesDirectory)\binary_size_data.txt
            7z.exe l -slt %%~ni.zip runtimes\linux-x64\native\libonnxruntime.so | findstr /R /C:"^Size = [0-9]*" | for /F "tokens=3" %%a  in ('more') do if not "%%a" == "" echo linux,x64,${{ parameters.buildVariant }},%%a >> $(Build.BinariesDirectory)\binary_size_data.txt
            7z.exe l -slt %%~ni.zip runtimes\linux-aarch64\native\libonnxruntime.so | findstr /R /C:"^Size = [0-9]*" | for /F "tokens=3" %%a  in ('more') do if not "%%a" == "" echo linux,aarch64,${{ parameters.buildVariant }},%%a >> $(Build.BinariesDirectory)\binary_size_data.txt
            7z.exe l -slt %%~ni.zip runtimes\osx.10.14-x64\native\libonnxruntime.dylib | findstr /R /C:"^Size = [0-9]*" | for /F "tokens=3" %%a  in ('more') do if not "%%a" == "" echo osx,x64,${{ parameters.buildVariant }},%%a >> $(Build.BinariesDirectory)\binary_size_data.txt
            7z.exe l -slt %%~ni.zip runtimes\win-x64\native\onnxruntime.dll | findstr /R /C:"^Size = [0-9]*" | for /F "tokens=3" %%a  in ('more') do if not "%%a" == "" echo win,x64,${{ parameters.buildVariant }},%%a >> $(Build.BinariesDirectory)\binary_size_data.txt
            7z.exe l -slt %%~ni.zip runtimes\win-x86\native\onnxruntime.dll | findstr /R /C:"^Size = [0-9]*" | for /F "tokens=3" %%a  in ('more') do if not "%%a" == "" echo win,x86,${{ parameters.buildVariant }},%%a >> $(Build.BinariesDirectory)\binary_size_data.txt            
             )
           ) 
  - task: AzureCLI@2
    displayName: 'Azure CLI'
    inputs:
      azureSubscription: AIInfraBuildOnnxRuntimeOSS
      scriptLocation: inlineScript
      scriptType: batch
      inlineScript: |
        python.exe $(Build.SourcesDirectory)\tools\ci_build\github\windows\post_binary_sizes_to_dashboard.py --commit_hash=$(Build.SourceVersion) --size_data_file=binary_size_data.txt --build_project=Lotus --build_id=$(Build.BuildId)
      workingDirectory: '$(Build.BinariesDirectory)'

