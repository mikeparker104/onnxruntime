<Project Sdk="MSBuild.Sdk.Extras/3.0.22">

  <PropertyGroup>
    <TargetFrameworks>netstandard1.1;netstandard2.0;xamarinios10;monoandroid11.0;</TargetFrameworks>
    <Platforms>AnyCPU;x86</Platforms>
    <LangVersion>7.2</LangVersion>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <SignAssembly>true</SignAssembly>
    <DelaySign>false</DelaySign>
    <AssemblyOriginatorKeyFile>..\..\OnnxRuntime.snk</AssemblyOriginatorKeyFile>

    <!--internal build related properties-->
    <OnnxRuntimeRoot>$(ProjectDir)..\..\..</OnnxRuntimeRoot>
    <OnnxRuntimeCsharpRoot>$(OnnxRuntimeRoot)\csharp</OnnxRuntimeCsharpRoot>
    <TargetArchitecture Condition=" '$(TargetArchitecture)' == '' ">x64</TargetArchitecture>  

    <RootNamespace>Microsoft.ML.OnnxRuntime</RootNamespace>
    <AssemblyName>Microsoft.ML.OnnxRuntime</AssemblyName>
    <EnableDefaultItems>false</EnableDefaultItems>
    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>
    <DebugType>portable</DebugType>

    <!--- packaging properties -->
    <OrtPackageId Condition=" '$(OrtPackageId)' == '' ">Microsoft.ML.OnnxRuntime</OrtPackageId>

    <!--- The package name is always hardcoded as the package created by this project only contains managed assemblies -->
    <!--- The parameter OrtPackageId is only used for some conditional logic below -->    
    <PackageId>Microsoft.ML.OnnxRuntime.Managed</PackageId>
    <Authors>Microsoft</Authors>
    <PackageVersion Condition=" '$(PackageVersion)' == '' ">0.0.0</PackageVersion>
    <Version>$(PackageVersion)</Version>
    <Description>This package contains ONNX Runtime for .Net platforms</Description>
    <PackageTags>ONNX;ONNX Runtime;Machine Learning</PackageTags>
    <PackageProjectUrl>https://github.com/Microsoft/onnxruntime</PackageProjectUrl>
    <Copyright>Â© Microsoft Corporation. All rights reserved.</Copyright>
    <PackageLicenseFile>LICENSE.txt</PackageLicenseFile>
    <PackageIconUrl>https://go.microsoft.com/fwlink/?linkid=2049168</PackageIconUrl>
    <PackageReleaseNotes>
      Release Def:
        Branch: $(BUILD_SOURCEBRANCH)
        Commit: $(BUILD_SOURCEVERSION)
        Build: https://aiinfra.visualstudio.com/Lotus/_build/results?buildId=$(BUILD_BUILDID)
    </PackageReleaseNotes>
    <!-- sourcelink flags -->
    <PublishRepositoryUrl>true</PublishRepositoryUrl>

    <!-- Optional: Embed source files that are not tracked by the source control manager in the PDB -->
    <!--EmbedUntrackedSources>true</EmbedUntrackedSources-->

    <!-- TEMP
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    -->
    <GenerateTargetFrameworkAttribute>false</GenerateTargetFrameworkAttribute>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
    <Configurations>Debug;Release;RelWithDebInfo</Configurations>

    <IsLinuxBuild Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' == 'true'">true</IsLinuxBuild> 
    <IsWindowsBuild Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))' == 'true'">true</IsWindowsBuild> 
    <IsMacOSBuild Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))' == 'true'">true</IsMacOSBuild>
  </PropertyGroup>

    <!-- TEMP 
    <PropertyGroup Condition=" '$(Version)' == '' ">
        <VersionPrefix Condition=" '$(VersionPrefix)' == '' ">1.0.0</VersionPrefix>
        <Version Condition=" '$(VersionSuffix)' != '' ">$(VersionPrefix)-$(VersionSuffix)</Version>
        <Version Condition=" '$(Version)' == '' ">$(VersionPrefix)</Version>
    </PropertyGroup>
    -->

    <PropertyGroup Condition="'$(IsLinuxBuild)'=='true'">
        <!--internal build related properties for Linux -->
        <OnnxRuntimeBuildDirectory Condition="'$(OnnxRuntimeBuildDirectory)'==''">$(OnnxRuntimeCsharpRoot)\..\build\Linux</OnnxRuntimeBuildDirectory>
        <NativeBuildOutputDir>$(OnnxRuntimeBuildDirectory)\$(Configuration)</NativeBuildOutputDir>
    </PropertyGroup>

    <PropertyGroup Condition="'$(IsWindowsBuild)'=='true'">
        <!--internal build related properties for Windows -->
        <OnnxRuntimeBuildDirectory Condition="'$(OnnxRuntimeBuildDirectory)'==''">$(OnnxRuntimeCsharpRoot)\..\build\Windows</OnnxRuntimeBuildDirectory>
        <NativeBuildOutputDir>$(OnnxRuntimeBuildDirectory)\$(Configuration)\$(Configuration)</NativeBuildOutputDir>
    </PropertyGroup>

    <PropertyGroup Condition="'$(IsMacOSBuild)'=='true'">
        <!--internal build related properties for OSX -->
        <OnnxRuntimeBuildDirectory Condition="'$(OnnxRuntimeBuildDirectory)'==''">$(OnnxRuntimeCsharpRoot)\..\build\MacOS</OnnxRuntimeBuildDirectory>
        <NativeBuildOutputDir>$(OnnxRuntimeBuildDirectory)\$(Configuration)</NativeBuildOutputDir>
    </PropertyGroup>
    <PropertyGroup Condition="$(TargetFramework.StartsWith('xamarinios'))">
      <DefineConstants>__IOS__;</DefineConstants>
    </PropertyGroup>
    <PropertyGroup Condition="$(TargetFramework.StartsWith('monoandroid'))">
      <DefineConstants>__ANDROID__;</DefineConstants>
    </PropertyGroup>

  <ItemGroup>
    <None Include="$(OnnxRuntimeCsharpRoot)\..\include\onnxruntime\core\session\onnxruntime_*.h"
          PackagePath="\build\native\include"
          Pack="false"
          CopyToOutputDirectory="Never"
          Visible="false"
    />
    <None Include="$(OnnxRuntimeCsharpRoot)\..\include\onnxruntime\core\providers\cpu\cpu_provider_factory.h"
          PackagePath="\build\native\include"
          Pack="false"
          CopyToOutputDirectory="Never"
          Visible="false"
    />
    <None Include="$(OnnxRuntimeCsharpRoot)\..\include\onnxruntime\core\providers\dml\dml_provider_factory.h"
          Condition="'$(OrtPackageId)' == 'Microsoft.ML.OnnxRuntime.DirectML'"
          PackagePath="\build\native\include"
          Pack="false"
          CopyToOutputDirectory="Never"
          Visible="false"
    />
    <None Include="$(NativeBuildOutputDir)\libonnxruntime.so"
          Condition="Exists('$(NativeBuildOutputDir)\libonnxruntime.so')"
          PackagePath="\runtimes\linux-$(TargetArchitecture)\native"
          Pack="false"
          CopyToOutputDirectory="Never"
          Visible="false"
    />
    <None Include="$(NativeBuildOutputDir)\onnxruntime.lib"
          Condition="Exists('$(NativeBuildOutputDir)\onnxruntime.lib')"
          PackagePath="\runtimes\win-$(TargetArchitecture)\native"
          Pack="false"
          CopyToOutputDirectory="Never"
          Visible="false"
    />
    <None Include="$(NativeBuildOutputDir)\onnxruntime.dll"
          Condition="Exists('$(NativeBuildOutputDir)\onnxruntime.dll')"
          PackagePath="\runtimes\win-$(TargetArchitecture)\native"
          Pack="false"
          CopyToOutputDirectory="Always"
          Visible="false"
    />
    <None Include="$(NativeBuildOutputDir)\onnxruntime.pdb"
          Condition="Exists('$(NativeBuildOutputDir)\onnxruntime.pdb')"
          PackagePath="\runtimes\win-$(TargetArchitecture)\native"
          Pack="false"
          CopyToOutputDirectory="Always"
          Visible="false"
    />
    <None Include="$(NativeBuildOutputDir)\dnnl.dll"
          Condition="Exists('$(NativeBuildOutputDir)\dnnl.dll')"
          PackagePath="\runtimes\win-$(TargetArchitecture)\native"
          Pack="false"
          CopyToOutputDirectory="Always"
          Visible="false"
    />
    <None Include="$(NativeBuildOutputDir)\mklml.dll"
          Condition="Exists('$(NativeBuildOutputDir)\mklml.dll')"
          PackagePath="\runtimes\win-$(TargetArchitecture)\native"
          Pack="false"
          CopyToOutputDirectory="Always"
          Visible="false"
    />
    <None Include="$(NativeBuildOutputDir)\libiomp5md.dll"
          Condition="Exists('$(NativeBuildOutputDir)\libiomp5md.dll')"
          PackagePath="\runtimes\win-$(TargetArchitecture)\native"
          Pack="false"
          CopyToOutputDirectory="Always"
          Visible="false"
    />
    <None Include="$(NativeBuildOutputDir)\tvm.dll"
          Condition="Exists('$(NativeBuildOutputDir)\tvm.dll')"
          PackagePath="\runtimes\win-$(TargetArchitecture)\native"
          Pack="false"
          CopyToOutputDirectory="Always"
          Visible="false"
    />
    <None Include="$(OnnxRuntimeCsharpRoot)\..\LICENSE.txt;$(OnnxRuntimeCsharpRoot)\..\ThirdPartyNotices.txt;$(OnnxRuntimeCsharpRoot)\..\docs\Privacy.md"
          PackagePath="\"
          Pack="true"
          Visible="false"
    />
    <None Include="targets\netstandard\$(PackageId).targets"
          PackagePath="build\netstandard1.1\$(PackageId).targets;build\netstandard2.0\$(PackageId).targets"
          Pack="true"
          Visible="false" 
    />

    <!-- Some tools to be packaged in nightly build only, should not be released -->
    <!-- These are copied to the runtimes folder for convenience of loading with the dlls -->
    <None Include="$(NativeBuildOutputDir)\onnxruntime_perf_test.exe"
          Condition="('$(IsReleaseBuild)' != 'true') And ($(TargetArchitecture)=='x64') And Exists('$(NativeBuildOutputDir)\onnxruntime_perf_test.exe')"
          PackagePath="\runtimes\win-$(TargetArchitecture)\native"
          Pack="false"
          Visible="false"
    />
    <None Include="$(NativeBuildOutputDir)\onnx_test_runner.exe"
          Condition="('$(IsReleaseBuild)' != 'true') And ($(TargetArchitecture)=='x64') And Exists('$(NativeBuildOutputDir)\onnx_test_runner.exe')"
          PackagePath="\runtimes\win-$(TargetArchitecture)\native"
          Pack="false"
          Visible="false"
    />
  </ItemGroup>

  <ItemGroup>
    <Compile Include="**\*.shared.cs" Link="%(Filename)%(Extension)" />
    <Compile Include="**\*.shared.*.cs" Link="%(Filename)%(Extension)" />
  </ItemGroup>

  <ItemGroup Condition="$(TargetFramework.StartsWith('netstandard'))">
    <PackageReference Include="System.Memory" Version="4.5.4" />
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0" PrivateAssets="All" />
    <Compile Include="**\*.netstandard.cs" Link="platform\netstandard\%(Filename)%(Extension)" />
   <Compile Include="**\*.netstandard.*.cs" Link="platform\netstandard\%(Filename)%(Extension)" />
  </ItemGroup>

  <ItemGroup Condition="$(TargetFramework.StartsWith('monoandroid'))">
    <Compile Include="**\*.android.cs" Link="platform\android\%(Filename)%(Extension)" />
    <Compile Include="**\*.android.*.cs" Link="platform\android\%(Filename)%(Extension)" />
  </ItemGroup>

  <ItemGroup Condition="$(TargetFramework.StartsWith('xamarinios')) ">
    <Compile Include="**\*.ios.cs" Link="platform\ios\%(Filename)%(Extension)" />
    <Compile Include="**\*.ios.*.cs" Link="platform\ios\%(Filename)%(Extension)" />
  </ItemGroup>

  <ItemGroup>
    <LicenseFile Include="$(OnnxRuntimeCsharpRoot)\..\LICENSE" Visible="false" />
    <TargetsFile Include="$(OnnxRuntimeCsharpRoot)\src\Microsoft.ML.OnnxRuntime\targets\netstandard\targets.xml" Visible="false" />
  </ItemGroup>

  <Target Name="CopyMiscFiles" BeforeTargets="PreBuildEvent">
    <Copy SourceFiles="@(LicenseFile)" DestinationFiles="@(LicenseFile->'$(OnnxRuntimeCsharpRoot)\..\%(Filename).txt')" />
    <Copy SourceFiles="@(TargetsFile)" DestinationFiles="@(TargetsFile->'$(OnnxRuntimeCsharpRoot)\src\Microsoft.ML.OnnxRuntime\targets\netstandard\$(PackageId).targets')" />
  </Target>

    <Target Name="CopyPackage" AfterTargets="Pack">
      <Copy
        SourceFiles="$(OutputPath)\$(PackageId).$(PackageVersion).nupkg"
        DestinationFolder="$(NativeBuildOutputDir)\nuget-artifacts"
      />
    </Target>
    <PropertyGroup>
        <TargetFrameworks>netstandard1.1;netstandard2.0;xamarinios10;monoandroid10.0;</TargetFrameworks>
        <LangVersion>7.2</LangVersion>
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>

        <RootNamespace>Microsoft.ML.OnnxRuntime</RootNamespace>
        <AssemblyName>Microsoft.ML.OnnxRuntime</AssemblyName>

        <EnableDefaultItems>false</EnableDefaultItems>
        <EnableDefaultCompileItems>false</EnableDefaultCompileItems>
        <DebugType>portable</DebugType>
        <Configurations>Debug;Release</Configurations>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <PackageOutputPath>..\..\build_nuget\</PackageOutputPath>
        <GenerateTargetFrameworkAttribute>false</GenerateTargetFrameworkAttribute>
        <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
        <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>

        <PackageId Condition="'$(PackageId)' == '' ">Microsoft.ML.OnnxRuntime.Managed</PackageId>
        <Authors>Microsoft</Authors>
        <Description>This package contains ONNX Runtime for .Net platforms</Description>
        <PackageTags>ONNX;ONNX Runtime;Machine Learning</PackageTags>
        <PackageProjectUrl>https://github.com/Microsoft/onnxruntime</PackageProjectUrl>
        <Copyright>Â© Microsoft Corporation. All rights reserved.</Copyright>
        <PackageLicenseFile>LICENSE.txt</PackageLicenseFile>
        <SignAssembly>true</SignAssembly>
        <AssemblyOriginatorKeyFile>..\..\OnnxRuntime.snk</AssemblyOriginatorKeyFile>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Version)' == '' ">
        <VersionPrefix Condition=" '$(VersionPrefix)' == '' ">1.0.0</VersionPrefix>
        <Version Condition=" '$(VersionSuffix)' != '' ">$(VersionPrefix)-$(VersionSuffix)</Version>
        <Version Condition=" '$(Version)' == '' ">$(VersionPrefix)</Version>
    </PropertyGroup>

    <Target Name="CopyDependencyFiles" AfterTargets="PreBuildEvent">
        <ItemGroup>
            <LicenseFile Include="..\..\..\LICENSE" Link="LICENSE.txt" />
        </ItemGroup>
        <Copy SourceFiles="@(LicenseFile)" DestinationFiles="$(SolutionDir)\LICENSE.txt" SkipUnchangedFiles="True" />
    </Target>

    <ItemGroup>
        <None Include="LICENSE.txt" Pack="True" PackagePath="." Link="LICENSE.txt" />
        <None Include="..\..\..\ThirdPartyNotices.txt" Pack="True" PackagePath="." Link="ThirdPartyNotices.txt" />
        <None Include="..\..\..\docs\Privacy.md" Pack="True" PackagePath="." Link="Privacy.md" />
    </ItemGroup>

    <ItemGroup>
        <None Include="Targets/NetStandard/Microsoft.ML.OnnxRuntime.Managed.targets" Pack="True" PackagePath="buildTransitive\netstandard1.1\Microsoft.ML.OnnxRuntime.Managed.targets" Link="build\netstandard\Microsoft.ML.OnnxRuntime.Managed.targets" />
        <None Include="Targets/NetStandard/Microsoft.ML.OnnxRuntime.Managed.targets" Pack="True" PackagePath="build\netstandard1.1\Microsoft.ML.OnnxRuntime.Managed.targets" Link="build\netstandard\Microsoft.ML.OnnxRuntime.Managed.targets" />
        <None Include="Targets/NetStandard/Microsoft.ML.OnnxRuntime.Managed.targets" Pack="True" PackagePath="buildTransitive\netstandard2.0\Microsoft.ML.OnnxRuntime.Managed.targets" Link="build\netstandard\Microsoft.ML.OnnxRuntime.Managed.targets" />
        <None Include="Targets/NetStandard/Microsoft.ML.OnnxRuntime.Managed.targets" Pack="True" PackagePath="build\netstandard2.0\Microsoft.ML.OnnxRuntime.Managed.targets" Link="build\netstandard\Microsoft.ML.OnnxRuntime.Managed.targets" />
    </ItemGroup>

    <ItemGroup>
        <Compile Include="**\*.shared.cs" Link="%(Filename)%(Extension)" />
        <Compile Include="**\*.shared.*.cs" Link="%(Filename)%(Extension)" />
    </ItemGroup>

    <ItemGroup Condition="$(TargetFramework.StartsWith('netstandard'))">
        <PackageReference Include="System.Memory" Version="4.5.4" />
        <Compile Include="**\*.netstandard.cs" Link="platform\netstandard\%(Filename)%(Extension)" />
	    <Compile Include="**\*.netstandard.*.cs" Link="platform\netstandard\%(Filename)%(Extension)" />
    </ItemGroup>

    <ItemGroup Condition="$(TargetFramework.StartsWith('monoandroid'))">
	    <Compile Include="**\*.android.cs" Link="platform\android\%(Filename)%(Extension)" />
	    <Compile Include="**\*.android.*.cs" Link="platform\android\%(Filename)%(Extension)" />
    </ItemGroup>

    <ItemGroup Condition="$(TargetFramework.StartsWith('xamarinios')) ">
        <Compile Include="**\*.ios.cs" Link="platform\ios\%(Filename)%(Extension)" />
	    <Compile Include="**\*.ios.*.cs" Link="platform\ios\%(Filename)%(Extension)" />
    </ItemGroup>

    <ItemGroup>
        <LicenseFile Include="$(OnnxRuntimeCsharpRoot)\..\LICENSE" Visible="false" />
        <TargetsFile Include="$(OnnxRuntimeCsharpRoot)\src\Microsoft.ML.OnnxRuntime\targets.xml" Visible="false" />
    </ItemGroup>

    <Target Name="CopyMiscFiles" BeforeTargets="PreBuildEvent">
        <Copy SourceFiles="@(LicenseFile)" DestinationFiles="@(LicenseFile->'$(OnnxRuntimeCsharpRoot)\..\%(Filename).txt')" />
        <Copy SourceFiles="@(TargetsFile)" DestinationFiles="@(TargetsFile->'$(OnnxRuntimeCsharpRoot)\src\Microsoft.ML.OnnxRuntime\$(PackageId).targets')" />
    </Target>

    <Target Name="CopyPackage" AfterTargets="Pack">
      <Copy
        SourceFiles="$(OutputPath)\$(PackageId).$(PackageVersion).nupkg"
        DestinationFolder="$(NativeBuildOutputDir)\nuget-artifacts" />
    </Target>
  
</Project>